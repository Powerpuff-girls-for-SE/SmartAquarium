[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e681f45cf6edd760",
        "type": "mqtt-broker",
        "name": "Mosquitto",
        "broker": "smartaquarium-mosquitto-container-1:1883",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "0f232f6b27593567",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 240,
        "wires": [
            [
                "5454c5cbffa094ee"
            ]
        ]
    },
    {
        "id": "5454c5cbffa094ee",
        "type": "file in",
        "z": "f6f2187d.f17ca8",
        "name": "Sensor data",
        "filename": "/sensor.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 250,
        "y": 320,
        "wires": [
            [
                "da87f4ed68031abc"
            ]
        ]
    },
    {
        "id": "da87f4ed68031abc",
        "type": "csv",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 450,
        "y": 320,
        "wires": [
            [
                "41bf5d1d102b1fb5"
            ]
        ]
    },
    {
        "id": "af0ed5e7e6432db4",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Msg payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 360,
        "wires": []
    },
    {
        "id": "bd550aee79e277e1",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "aquarium/oxygen",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e681f45cf6edd760",
        "x": 1250,
        "y": 300,
        "wires": []
    },
    {
        "id": "41bf5d1d102b1fb5",
        "type": "delay",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 300,
        "wires": [
            [
                "0604adf5e5078d74"
            ]
        ]
    },
    {
        "id": "4291b9f2b4f0793d",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "get_oxygen",
        "func": "// Check if the message contains a property named 'payload' with JSON data\nif (msg.payload) {\n    try {\n        // Parse the JSON payload\n        const rowData = JSON.parse(msg.payload);\n\n        if (rowData[\"Oxygen (mg/L)\"] !== undefined) {\n            const value = rowData[\"Oxygen (mg/L)\"];\n\n            // Update the 'payload' property of the message with the extracted 'Temperature' value\n            msg.payload = value;\n\n            // Send the updated message to the next node in the flow\n            return msg;\n        } else {\n            return { payload: 'The \"temperature\" property is missing in the JSON data.' };\n        }\n    } catch (error) {\n        // If JSON parsing fails, send an error message\n        console.log(msg.payload);\n        return { payload: 'Error parsing JSON data: ' + error.message };\n    }\n} else {\n    // If 'payload' property is not found, send an error message\n    return { payload: 'JSON data not found in the input message.' };\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "bd550aee79e277e1",
                "af0ed5e7e6432db4"
            ]
        ]
    },
    {
        "id": "0604adf5e5078d74",
        "type": "json",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 830,
        "y": 300,
        "wires": [
            [
                "4291b9f2b4f0793d",
                "ac183c7082b83d7a",
                "ba67c583540126d8",
                "745752a9070b2eac",
                "1d30f8f02389c1b5"
            ]
        ]
    },
    {
        "id": "37885c06bebd6861",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Msg payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 500,
        "wires": []
    },
    {
        "id": "370172a9f2ff6e5c",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "aquarium/ammonia",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e681f45cf6edd760",
        "x": 1250,
        "y": 440,
        "wires": []
    },
    {
        "id": "745752a9070b2eac",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "get_ammonia",
        "func": "// Check if the message contains a property named 'payload' with JSON data\nif (msg.payload) {\n    try {\n        // Parse the JSON payload\n        const rowData = JSON.parse(msg.payload);\n\n        if (rowData[\"Ammonia-Nitrogen (mg/L)\"] !== undefined) {\n            const value = rowData[\"Ammonia-Nitrogen (mg/L)\"];\n\n            // Update the 'payload' property of the message with the extracted 'Temperature' value\n            msg.payload = value;\n\n            // Send the updated message to the next node in the flow\n            return msg;\n        } else {\n            return { payload: 'The \"ammonia\" property is missing in the JSON data.' };\n        }\n    } catch (error) {\n        // If JSON parsing fails, send an error message\n        console.log(msg.payload);\n        return { payload: 'Error parsing JSON data: ' + error.message };\n    }\n} else {\n    // If 'payload' property is not found, send an error message\n    return { payload: 'JSON data not found in the input message.' };\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 440,
        "wires": [
            [
                "370172a9f2ff6e5c",
                "37885c06bebd6861"
            ]
        ]
    },
    {
        "id": "6259f2b0cee5f2d7",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Msg payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 640,
        "wires": []
    },
    {
        "id": "fcdf768a6b9ad27f",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "aquarium/water_level",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e681f45cf6edd760",
        "x": 1260,
        "y": 580,
        "wires": []
    },
    {
        "id": "1d30f8f02389c1b5",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "get_water_level",
        "func": "// Check if the message contains a property named 'payload' with JSON data\nif (msg.payload) {\n    try {\n        // Parse the JSON payload\n        const rowData = JSON.parse(msg.payload);\n\n        if (rowData[\"Water_Level (%)\"] !== undefined) {\n            const value = rowData[\"Water_Level (%)\"];\n\n            // Update the 'payload' property of the message with the extracted 'Temperature' value\n            msg.payload = value;\n\n            // Send the updated message to the next node in the flow\n            return msg;\n        } else {\n            return { payload: 'The \"water\" property is missing in the JSON data.' };\n        }\n    } catch (error) {\n        // If JSON parsing fails, send an error message\n        console.log(msg.payload);\n        return { payload: 'Error parsing JSON data: ' + error.message };\n    }\n} else {\n    // If 'payload' property is not found, send an error message\n    return { payload: 'JSON data not found in the input message.' };\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 580,
        "wires": [
            [
                "fcdf768a6b9ad27f",
                "6259f2b0cee5f2d7"
            ]
        ]
    },
    {
        "id": "701ab5f9276cb4a1",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Msg payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 240,
        "wires": []
    },
    {
        "id": "a5f5564cc4787e6f",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "aquarium/ph",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e681f45cf6edd760",
        "x": 1230,
        "y": 180,
        "wires": []
    },
    {
        "id": "ac183c7082b83d7a",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "get_ph",
        "func": "// Check if the message contains a property named 'payload' with JSON data\nif (msg.payload) {\n    try {\n        // Parse the JSON payload\n        const rowData = JSON.parse(msg.payload);\n\n        // Check if the 'ph' property exists in the JSON object\n        if (rowData.pH !== undefined) {\n            // Extract the 'ph' value\n            const phValue = rowData.pH;\n\n            // Update the 'payload' property of the message with the extracted 'ph' value\n            msg.payload = phValue;\n\n            // Send the updated message to the next node in the flow\n            return msg;\n        } else {\n            // If 'ph' property is not found, send an error message\n            return { payload: 'The \"ph\" property is missing in the JSON data.' };\n        }\n    } catch (error) {\n        // If JSON parsing fails, send an error message\n        console.log(msg.payload);\n        return { payload: 'Error parsing JSON data: ' + error.message };\n    }\n} else {\n    // If 'payload' property is not found, send an error message\n    return { payload: 'JSON data not found in the input message.' };\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 180,
        "wires": [
            [
                "a5f5564cc4787e6f",
                "701ab5f9276cb4a1"
            ]
        ]
    },
    {
        "id": "44eb01cc5ee8dc2b",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Msg payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 120,
        "wires": []
    },
    {
        "id": "9e1a8fced56a06a9",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "aquarium/temperature",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e681f45cf6edd760",
        "x": 1260,
        "y": 60,
        "wires": []
    },
    {
        "id": "ba67c583540126d8",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "get_temperature",
        "func": "// Check if the message contains a property named 'payload' with JSON data\nif (msg.payload) {\n    try {\n        // Parse the JSON payload\n        const rowData = JSON.parse(msg.payload);\n\n        if (rowData[\"Temperature (°C)\"] !== undefined) {\n            const temperatureValue = rowData[\"Temperature (°C)\"];\n\n            // Update the 'payload' property of the message with the extracted 'Temperature' value\n            msg.payload = temperatureValue;\n\n            // Send the updated message to the next node in the flow\n            return msg;\n        } else {\n            return { payload: 'The \"temperature\" property is missing in the JSON data.' };\n        }\n    } catch (error) {\n        // If JSON parsing fails, send an error message\n        console.log(msg.payload);\n        return { payload: 'Error parsing JSON data: ' + error.message };\n    }\n} else {\n    // If 'payload' property is not found, send an error message\n    return { payload: 'JSON data not found in the input message.' };\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 60,
        "wires": [
            [
                "9e1a8fced56a06a9",
                "44eb01cc5ee8dc2b"
            ]
        ]
    }
]